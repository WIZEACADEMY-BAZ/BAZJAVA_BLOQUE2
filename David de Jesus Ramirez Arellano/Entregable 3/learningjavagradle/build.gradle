/*plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'java'
}
group = 'com.wizeline.gradle'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}*/
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

buildscript {
    ext {
        springBootVersion = '2.7.5'
    }
repositories {
      maven { url 'https://repo.maven.apache.org/maven2'}
    }
    dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4.23.4") 
        classpath ('com.bmuschko:gradle-docker-plugin:6.2.0')
	}
}


apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'base'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'
apply plugin: 'com.bmuschko.docker-remote-api'


sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
maven { url 'https://repo.maven.apache.org/maven2'}
    mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation group: 'org.json', name: 'json', version: '20220320'
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'
	implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.72'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.7.5'
	implementation 'com.sun.xml.bind:jaxb-impl:2.3.7'
	implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.12'
	implementation 'org.springframework.boot:spring-boot-starter-actuator:2.7.5'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.5'
	implementation 'org.springframework.kafka:spring-kafka:2.9.2'
	testImplementation 'org.springframework.kafka:spring-kafka-test:2.9.2'
	implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
	// https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies	
}
def jarName = "${projectNameCI}" + '-' + "${projectVersionCI}" + '.jar'

jar {
    baseName = "${projectNameCI}"
    version = "${projectVersionCI}"
}

archivesBaseName = "${projectNameCI}"
version = "${projectVersionCI}"

docker {
    url = "${dockerDaemon}"
}

task createDockerfile(type: Dockerfile) {
    from('openjdk:11')
    destFile = project.file('Dockerfile')        
	label(['maintainer': "${maintainer}"])
    copyFile("build/libs/" + jarName , "/lib/" + jarName)
    exposePort("${puertoImagen}".toInteger())
    instruction 'ENV AMBIENTE=dev'
    instruction 'ENV LANG=C.utf8'
    instruction 'ENV TZ=America/Mexico_City'
    instruction 'USER root'
    instruction 'RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone'
    entryPoint('sh', '-c', 'java -Dspring.profiles.active=$AMBIENTE -jar /lib/' + jarName)
    
    group 'Docker'
	description 'Crea el archivo de Docker'
	dependsOn bootJar
}

def imageName = ("${projectNameCI}").toLowerCase()

task buildImage(type: DockerBuildImage, dependsOn: 'build') {
    println "ejecutando creacion de buildImage"
    inputDir = file('.')
    dockerFile = file('Dockerfile')
    images.add(imageName + ":" + "${projectVersionCI}")
    
    group 'Docker'
    description 'Construye la imagen'
    dependsOn createDockerfile
}


createDockerfile.finalizedBy buildImage

tasks.named('test') {
	useJUnitPlatform()
}
//Pruebas unitarias
jacoco {
    toolVersion = "0.8.8"
}

test {
    useJUnitPlatform()
    dependsOn 'cleanTest'
    testLogging{
        events "skipped", "passed", "failed"
    }
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    //finalizedBy 'sonarqube'
    reports {
        xml.required = true
    }
    }